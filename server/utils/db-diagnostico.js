// Script para diagnosticar problemas de conex√£o com o MongoDB
const mongoose = require('mongoose');

// Usar a string de conex√£o que voc√™ est√° utilizando em sua aplica√ß√£o
// Certifique-se de incluir o nome do banco de dados na URL
const MONGO_URI = 'mongodb+srv://mauaesports:mauaesports@cluster1.mujq5ew.mongodb.net/Mau√°Esports?retryWrites=true&w=majority&appName=Cluster1';

async function diagnosticarConexao() {
  console.log('üîç Iniciando diagn√≥stico de conex√£o com MongoDB...');
  console.log('URI de conex√£o:', MONGO_URI.replace(/mongodb\+srv:\/\/([^:]+):([^@]+)@/, 'mongodb+srv://****:****@'));
  
  try {
    const conn = await mongoose.connect(MONGO_URI, {
      serverSelectionTimeoutMS: 10000 // 10 segundos para timeout
    });
    
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');
    console.log(`Host: ${conn.connection.host}`);
    console.log(`Nome do banco de dados: ${conn.connection.name}`);
    
    // Verificar cole√ß√µes
    const collections = await conn.connection.db.listCollections().toArray();
    if (collections.length === 0) {
      console.log('‚ùå PROBLEMA DETECTADO: N√£o existem cole√ß√µes no banco de dados');
      console.log('Solu√ß√£o: Crie as cole√ß√µes necess√°rias manualmente no MongoDB Atlas ou execute o endpoint /api/seed');
    } else {
      console.log('Cole√ß√µes encontradas:');
      collections.forEach(c => console.log(`- ${c.name}`));
      
      // Verificar se a cole√ß√£o Usu√°rios existe
      const usersCollection = collections.find(c => 
        c.name === 'Usu√°rios' || c.name === 'usuarios' || c.name === 'users' || c.name === 'Users');
      
      if (!usersCollection) {
        console.log('‚ùå PROBLEMA DETECTADO: Cole√ß√£o de usu√°rios n√£o encontrada');
        console.log('Solu√ß√£o: Crie a cole√ß√£o "Usu√°rios" no MongoDB Atlas ou execute o endpoint /api/seed');
      } else {
        console.log(`‚úÖ Cole√ß√£o de usu√°rios encontrada: ${usersCollection.name}`);
        
        // Verificar documentos
        const count = await conn.connection.db.collection(usersCollection.name).countDocuments();
        console.log(`Total de documentos: ${count}`);
        
        if (count === 0) {
          console.log('‚ùå PROBLEMA DETECTADO: A cole√ß√£o de usu√°rios est√° vazia');
          console.log('Solu√ß√£o: Execute o endpoint /api/seed para popular o banco de dados');
        } else {
          // Mostrar exemplo de documento
          const sample = await conn.connection.db.collection(usersCollection.name).findOne();
          console.log('Exemplo de documento:');
          console.log(JSON.stringify(sample, null, 2));
        }
      }
    }
    
    // Verificar modelo
    try {
      const User = mongoose.model('User');
      const modelUsers = await User.find().limit(2);
      console.log(`‚úÖ Modelo 'User' encontrou ${modelUsers.length} documentos`);
      
      if (modelUsers.length > 0) {
        console.log('Exemplo de documento atrav√©s do modelo:');
        console.log(JSON.stringify(modelUsers[0].toObject(), null, 2));
      }
    } catch (modelError) {
      console.log('‚ùå PROBLEMA DETECTADO: Erro ao usar o modelo User');
      console.log('Erro:', modelError.message);
      console.log('Solu√ß√£o: Verifique se o modelo est√° definido corretamente e se o nome da cole√ß√£o est√° correto');
    }
    
  } catch (error) {
    console.error('==================================================');
    console.error(`‚ùå ERRO DE CONEX√ÉO: ${error.message}`);
    console.error('Detalhes completos:', error);
    console.error('==================================================');
    console.error('üîç Poss√≠veis causas:');
    console.error('1. String de conex√£o incorreta');
    console.error('2. Usu√°rio ou senha inv√°lidos');
    console.error('3. IP n√£o est√° na lista de IPs permitidos no MongoDB Atlas');
    console.error('4. Problemas de rede/firewall');
    console.error('5. Verifique se o cluster MongoDB est√° dispon√≠vel');
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('Desconectado do MongoDB');
    }
  }
}

// Executar diagn√≥stico
diagnosticarConexao().then(() => console.log('Diagn√≥stico conclu√≠do'));